"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _http = require("http");

var _http2 = _interopRequireDefault(_http);

var _nodeBebop = require("node-bebop");

var _nodeBebop2 = _interopRequireDefault(_nodeBebop);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var drone = _nodeBebop2.default.createClient();

var DroneHttpServer = function () {
	function DroneHttpServer(port) {
		_classCallCheck(this, DroneHttpServer);

		this.port = port;
		console.log("DroneHttpServer object created");
	}

	_createClass(DroneHttpServer, [{
		key: "start",
		value: function start() {
			var _this = this;

			var server = _http2.default.createServer(this.handleRequest);

			drone.on('navdata', function (data) {
				lastDroneDataReceived = data;
			});

			server.listen(this.port, function () {
				return console.log("HTTP server running on port " + _this.port);
			});
		}
	}, {
		key: "handleRequest",
		value: function handleRequest(request, response) {
			var url_params = request.url.split('/');

			if (url_params.length < 2) return;

			var command = url_params[1];
			var speed = void 0;
			var duration = void 0;

			if (!drone) return;

			switch (command) {

				case 'takeoff':
				case 'land':
				case 'stop':
				case 'disableEmergency':

					console.log("DRONE command: " + command);
					response.end('DRONE command: ' + command);

					if (typeof drone[command] === "function") drone[command]();
					break;

				case 'up':case 'down':case 'front':case 'back':case 'clockwise':case 'counterClockwise':case 'left':case 'right':

					//extract 'speed' from the url params
					speed = url_params.length >= 3 ? url_params[2] : 0;

					//convert from 0-100 to 0-1
					speed /= 100;

					console.log("DRONE command " + command + " with speed " + speed);
					response.end("DRONE command " + command + " with speed " + speed);

					if (typeof drone[command] === "function") drone[command](speed);

					break;
				case 'flipAhead':case 'flipLeft':case 'yawShake':case 'wave':
					//extract 'duration' from the url params
					duration = url_params.length >= 3 ? url_params[2] : 0;

					console.log("DRONE command " + command + " with duration " + duration);
					response.end("DRONE command " + command + " with duration " + duration);

					drone.animate(command, duration * 1000);

					break;

				case 'poll':
					respondToPoll(response);
					break;

				case 'reset_all':
					console.log('reset_all command received from Scratch. execute a \'stop\' on the drone and then a \'land\'.');
					response.end('reset_all received');

					drone.stop();
					drone.land();

					break;

				default:
					console.log('Unknown Command: ' + request.url);
					response.end('Unknown Command: ' + request.url);
					break;

			}
		}
	}, {
		key: "handleVideoRequest",
		value: function handleVideoRequest(request, response) {
			if (!lastPng) {
				response.writeHead(503);
				response.end('Did not receive any png data yet');
				return;
			}

			response.writeHead(200, { 'Content-Type': 'image/png' });
			response.end(lastPng);
		}
	}]);

	return DroneHttpServer;
}();

exports.default = DroneHttpServer;

